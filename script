#############
#This R code summarises the ML analyses reported in the following paper:

#George Joy1,2§ MBBS, Luis R Lopes1,2§ MD, PhD,  Matthew Webber 2,3,4 MBChB, Alessandra M Ardissino2 BSc, James Wilson1,2 MBBS, Fiona Chan2,3,4 MBBS, Iain Pierce1,2,3 PhD, Rebecca K Hughes1,2 MBBS, Konstantinos Moschonas1,2 MBBS, Hunain Shiwani1,2 BMBS, Robert Jamieson5 MSc, Paula P Velazquez1,8 MBBS, Ramya Vijayakumar11 PhD, Erica Dall’Armellina9 MD, PhD, Peter W Macfarlane5 DSc, Charlotte Manisty1,2 MBBS, PhD, Peter Kellman10 PhD, Rhodri H Davies1,2,3 MBBS, PhD, Maite Tome8 MD, PhD, Vladan Koncar6 PhD, Xuyuan Tao6 PhD, Christoph Guger7 PhD, Yoram Rudy11 PhD,  Alun D Hughes2,3 MBBS, PhD, Pier D Lambiase1,2 BM BCh, PhD, James C Moon1,2 MB BCh, MD, Michele Orini2,3* PhD, Gabriella Captur2,3,4* MD, PhD
§ Joint first author
* Joint senior author

1.	Barts Heart Centre, Barts Health NHS Trust, London, UK.¬¬
2.	Institute of Cardiovascular Science, University College London, London, UK.
3.	Medical Research Council Unit for Lifelong Health and Ageing, University College London, UK.
4.	Centre for Inherited Heart Muscle Conditions, Department of Cardiology, Royal Free London NHS Foundation Trust London, UK.
5.	Electrocardiology Section, School of Health and Wellbeing, University of Glasgow, Glasgow, UK.
6.	École Nationale Supérieure des Arts et Industries Textiles, University of Lille, France.
7.	G.Tec medical engineering GmbH, Austria. 
8.	Cardiology Clinical and Academic Group, St Georges University of London & St Georges University Hospitals NHS Foundation Trust, UK
9.	Biomedical Imaging Sciences Department, Leeds Institute of Cardiovascular and Metabolic Medicine, University of Leeds, UK
10.	National Heart, Lung, and Blood Institute, National Institutes of Health, DHHS, Bethesda, USA
11.	Cardiac Bioelectricity and Arrhythmia Center, Washington University, St Louis, USA. 

##########################
#Require the following R packages 

require(e1071)
require(HH)
require(stats)
require(psych)
require(Hmisc)
require(pastecs)
require(graphics)
require(ggplot2)
require(scales)
require(reshape2)
require(plyr)
require(zoo)
require(reshape)
require(simecol)
require(QuantPsyc)
require(data.table)
require(car)
require (lattice)
require(beeswarm)
require(ROCR) 
require(caret)
require(cutpointr)
require(fANCOVA)
require(caTools)

################################################
#Cut-points for ECGI biomarkers
################################################
cutpoints<- read.csv("~/Documents/PUBLICATIONS/cutpoints.csv",  sep=",", header = TRUE)
cutpoints=read.table("~/Documents/PUBLICATIONS/cutpoints.csv",  sep=",", header = TRUE)
status <- as.factor(cutpionts$status)


cp <- cutpointr(cutpionts, NDefl_m, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, AT_Mean, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, AT_range, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, ARIc_Mean, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, ARIc_frid_Range, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, LocalGrad_AT_Mean, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, AmpQRS_m, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, RTc_frid_Mean, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, RTc_frid_Range, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, LocalGrad_RTc_frid_Mean, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, LocalGrad_AT_Max, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#
cp <- cutpointr(cutpionts, LocalGrad_RTc_frid_Max, status, method = maximize_metric, metric = accuracy)
summary(cp)
plot(cp)
#

################################################
#SVM & Cross-validation for low vs higher-risk/NSVT+ HCM
################################################
dataset<- read.csv("~/Documents/PUBLICATIONS/risk.csv",  sep=",", header = TRUE)
dataset=read.table("~/Documents/PUBLICATIONS/risk.csv",  sep=",", header = TRUE)
dataset$status = factor(dataset$status, levels = c(0, 1))

set.seed(123)
split = sample.split(dataset$status, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set[-12] = scale(training_set[-12])
test_set[-12] = scale(test_set[-12])
classifier = svm(formula = status ~ .,
                 data = training_set,
                 type = 'C-classification',
                 kernel = 'radial', cost=1, gamma=0.6)
y_pred = predict(classifier, newdata = test_set[-12])
cm = table(test_set[, 12], y_pred)
cm

folds = createFolds(training_set$status, k = 10)
cv = lapply(folds, function(x) { 
training_fold = training_set[-x, ] 
  test_fold = training_set[x, ] 
classifier = svm(formula = status ~ .,
                   data = training_fold,
                   type = 'C-classification',
                   kernel = 'radial', cost=1, gamma=0.6)
y_pred = predict(classifier, newdata = test_fold[-12])
  cm = table(test_fold[, 12], y_pred)
  accuracy = (cm[1,1] + cm[2,2]) / (cm[1,1] + cm[2,2] + cm[1,2] + cm[2,1])
  return(accuracy)
})
accuracy = mean(as.numeric(cv))
accuracy

################################################
#SVM (training/validation) for G+LVH- vs HV
################################################
ecgi<- read.csv("~/Documents/PUBLICATIONS/ecgi.csv",  sep=",", header = TRUE)
ecgi=read.table("~/Documents/PUBLICATIONS/ecgi.csv",  sep=",", header = TRUE)
status <- as.factor(ecgi$status)
ecgi$status <- as.factor(ecgi$status)

set.seed(1)  
train = sample(1:nrow(ecgi), round(nrow(ecgi)*0.8)) 
train_ecgi = ecgi[train, ]
test_ecgi = ecgi[-train,]
fix(train_ecgi)
fix(test_ecgi)

x <- subset(train_ecgi, select=-status)
y <- as.factor(train_ecgi$status)
fix(x)
fix(y)

svm1 = svm(status ~., data = train_ecgi, kernel = 'polynomial', gamma = 0.1, cost = 10)
summary(svm1)

pred <- predict(svm1,x)
table(pred,y)
summary(pred)
pred3<-prediction(as.numeric(pred), as.numeric(train_ecgi$status))
curve<-performance(pred3,"auc")
rates <- performance(pred3, "tpr", "fpr") 
summary(pred3)
pred3
print(str(curve))
print(svm1)

rates3 <- performance(pred3, measure = "tpr", x.measure = "fpr")
plot(rates3)
abline(a=0, b= 1) 
plot(rates3,
avg= "threshold",
colorize=TRUE,
lwd= 3)
plot(rates3,
lty=3,
col="grey78",
add=TRUE)
perf3 <- performance(pred3, "prec", "rec")
plot(perf3)
perf4 <- performance(pred3, "sens", "spec")
plot(perf4)
pred


####Test the validation hold-out set
xx <- subset(test_ecgi, select=-status)
yy <- as.factor(test_ecgi$status)
#fix(xx)
#fix(yy)

predx = predict(svm1, test_ecgi)
confusion_matrix = table(test_ecgi$status, predx)
confusion_matrix

predxx <- predict(svm1,xx)
table(predxx,yy)
summary(predxx)
pred5<-prediction(as.numeric(predxx), as.numeric(test_ecgi$status))
curve<-performance(pred5,"auc")
rates <- performance(pred5, "tpr", "fpr") 
summary(pred5)
pred5
print(str(curve))

rates5 <- performance(pred5, measure = "tpr", x.measure = "fpr")
plot(rates5)
abline(a=0, b= 1) 
plot(rates5,
avg= "threshold",
colorize=TRUE,
lwd= 3)
plot(rates5,
lty=3,
col="grey78",
add=TRUE)

perf5 <- performance(pred5, "prec", "rec")
plot(perf5)
perf6 <- performance(pred5, "sens", "spec")
plot(perf6)
predxx

#######################################################################################
